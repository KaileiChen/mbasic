%% \VignetteIndexEntry{CSSP: ChIP-Seq Statistical Power}
\documentclass[a4paper,10pt]{article}
\usepackage{amsmath,mathrsfs,graphicx}
%\usepackage[top=2cm,bottom=2cm,left=2cm,right=2cm]{geometry}
\usepackage[utf8]{inputenc}
\usepackage{color}
%\usepackage{natbib}

%\usepackage{Sweave}
<<eval=TRUE, echo=FALSE,results="asis">>=
BiocStyle::latex()
knitr::opts_chunk$set(eval = TRUE, message = FALSE, cache = FALSE, echo = TRUE, results = "markup", tidy = TRUE, warning = FALSE)
@

\title{MBASIC: Matrix Based Analysis for State-space Inference and Clustering}

\author{Chandler Zuo and S\"und\"uz Kele\c{s}\\
  Departments of Statistics and of  Biostatistics and Medical Informatics, University of Wisconsin-Madison}
\date{}

\begin{document}
\maketitle

\tableofcontents

\section{Introduction}

This document provides an introduction to the power analysis of ChIP-seq data with the \software{MBASIC} package (\textbf{MBASIC} which stands for \textbf{M}atrix \textbf{B}ased \textbf{A}nalysis for \textbf{S}tate-space \textbf{I}nference and \textbf{C}lustering) \cite{zuo14}. \software{MBASIC} provides a Bayesian framework for clustering units based on their infered states over a set of experimental conditions.

\software{MBASIC} is especially useful for integrative analysis for ChIP-seq experiments. In this case, a set of prespecified loci is clustered based on their activities over celltypes and transcription factors. We build a pipeline in the \software{MBASIC} package and will focus on this pipeline in this vignette. We will introduce some advanced options in building the \textbf{MBASIC} model in Section \ref{sec:adv}.

\section{MBASIC Pipeline for Sequencing Data}

\subsection{Overview}

Applying the \textbf{MBASIC} framework to analyzing ChIP-seq data sets includes three steps:

\begin{enumerate}
\item \textit{Matching each ChIP replicate data set with their input data set:} This step matches ChIP replicate files with their matching input files;
\item \textit{Calculating mapped counts and the covariate on the target loci:} This step calculates the mapped counts from each ChIP and input replicate files on each of the target locus;
\item \textit{Fitting MBASIC model:} This step fits the MBASIC model to identify the binding states for each locus and cluster the loci based on their binding states across different conditions.
\end{enumerate}

\software{MBASIC} integrates Step 2-3 in a single function \Rfunction{MBASIC.pipeline}. For Step 1 \software{MBASIC} provides a function \Rfunction{ChIPInputMatch} that assists matching the ChIP files with input files based on the naming convention of the ENCODE datasets. We have found that in practice, more often than not, some violations to the ENCODE file name conventions always occur, and manual adjustments to the results of our automated matching are inevitable. Therefore, we do not integrate this function in \Rfunction{MBASIC.pipeline}.

\subsection{Step 1: Match ChIP and Input Datasets}

<<echo=FALSE,results="hide">>=
rm(list = ls())
mydir <- getwd()
options(width = 50)
setwd("~/mbasic_git/test/")
@

To illustrate Step 1 we first generate a set of synthetic data. \software{MBASIC} package provides a function \Rfunction{generateSyntheticData} to assist our demo. This function generates synthetic BED data for ChIP and input samples, as well as mappability and GC scores in a directory specified by the 'dir' argument. It also generates a target set of loci for our analysis. By default, the number of loci is 100, each with size 20 bp. All data are generated across 5 chromosomes, each with size 10K bp. ChIP data are from 2 celltypes, and for each celltype there are K=5 TFs. Under each condition randomly 1-3 replicates for the ChIP data are generated. All ChIP data from the same celltype are matched to the same set of 3 input replicates.

<<>>=
library(MBASIC)
@ 

<<cache=TRUE>>=
target <- generateSyntheticData(dir = "syntheticData")
head(target)
system("ls syntheticData/*/*", intern = TRUE)[1:5]
@

We have developed the \Rfunction{ChIPInputMatch} function to help match the ChIP and input data files. In the following example, we use this function to read all files with suffices ``.bed" and ``.bam'' in directories specified by the argument ``dir", and matches the files assuming ENCODE naming convention. It looks up files up to the number of levels of subdirectories specified by ``depth". The output of this function contains multiple columns. The first column contains the file name for each ChIP replicate. The second column is the initial string for the matching input replicates, because for each ChIP replicate there are possibly multiple input replicates. The rest of the columns contains information for lab, experiment identifier, factor and control identifier. This information is parsed from the file names.

We acknowledge that the current function may not parse all data file names correctly. For practical data files, users are suggested to check its result, and manual corrections may be needed.

<<cache=TRUE>>=
tbl <- ChIPInputMatch(dir = paste("syntheticData/", c("chip", "input"), sep = ""), celltypes = c("Cell1", "Cell2"), suffices = c(".bam", ".bed"), depth = 5)
head(tbl)
@

We also need to specify the experimental condition for each data set by a vector 'conds'.

<<cache=TRUE>>=
conds <- paste(tbl$cell, tbl$factor, sep = ".")
@

\subsection{Executing Step 2 and 3 Altogether}

Now we are in a position to continue the next steps in the pipeline. There are two ways to execute these steps: (1) use function \Rfunction{MBASIC.pipeline} to execute the two steps together; or (2) execute each step separately. The following code calls the function \Rfunction{MBASIC.pipeline}:

<<results="hide",cache=TRUE>>=
## remove file 'data.Rda' since it will be generated
## try(file.remove("data.Rda"))
fit <- MBASIC.pipeline(chipfile = tbl$chipfile, inputfile = tbl$inputfile, input.suffix = ".bed", target = target, chipformat = tbl$chipformat, inputformat = tbl$inputformat, fragLen = 150, pairedEnd = FALSE, unique = TRUE, fac = conds, J = 3, S = 2, family = "negbin", datafile = "data.Rda")
class(fit)
@

We list the meanings of the arguments of \Rfunction{MBASIC.pipeline} in Table \ref{tbl:arguments}. The above example fits a clustering model with 3 clusters. It returns an object of class \Rclass{MBASICFit}. This class is described in more details in Section \ref{sec:mbasicfit}.

Alternatively, we can fit models with varying numbers of clusters simultaneously, and pick the one with the minimum BIC value:

<<cache=TRUE>>=
allfits <- MBASIC.pipeline(chipfile = tbl$chipfile, inputfile = tbl$inputfile, input.suffix = ".bed", target = target, chipformat = tbl$chipformat, inputformat = tbl$inputformat, fragLen = 150, pairedEnd = FALSE, unique = TRUE, fac = conds, J = 3:10, S = 2, family = "negbin", datafile = "data.Rda")
names(allfits)
class(allfits$BestFit)
@ 

\begin{table}
  \centering
  \caption{Arguments for the \Rfunction{MBASIC.pipeline} function. For a comprehensive list of arguments and their details, users are recommended to read our manual.}\label{tbl:arguments}
  \begin{tabular}{p{2cm}p{10cm}}
    \hline
    \multicolumn{2}{c}{Data Sources}\\
    \hline
    chipfile & A string vector for the ChIP files.\\
    inputfile & A string vector for the matching input files. The length must be the same as ``chipfile".\\
    input.suffix & A string for the suffix of input files. If NULL, ``inputfile" will be treated as the full names of the input files. Otherwise, all inputfiles with the initial ``inputfile" and this suffix will be merged.\\
    chipformat (inputformat) & A string specifying the type of all ChIP (input) files, or a vector of string specifying the types of each ChIP (input) file.  Currently three file types are allowed: ``BAM", ``BED" or ``TAGALIGN'' (``TAGALIGN'' and ``BED'' files are treated as same).  Default: ``BAM".\\
    m.prefix (optional) & A string for the prefix of the mappability files. Default: NULL.\\
    m.suffix (optional) & A string for the suffix of the mappability files. See our man files for more details. Default: NULL.\\
    gc.prefix (optional) & A string for the prefix of the GC files. Default: NULL.\\
    gc.suffix (optional) & A string for the suffix of the GC files.  See our man files for more details. Default: NULL.\\
    \hline
    \multicolumn{2}{c}{Genomic Information}\\
    \hline
    target & A RangedData object for the target intervals where the reads are mapped.\\
    fragLen & Either a single value or a 2-column matrix of the fragment lengths, the first column for the different fragment lengths for each file in 'chipfile', and the second column for the fragment lengths for each file in 'inputfile'. Default: 150.\\
    pairedEnd & Either a boolean value or a 2-column boolean matrix for  whether each file is a paired-end data set. Currently this function only allows ``BAM" files for paired-end data. Default: FALSE.\\
    unique & A boolean value for whether only reads with distinct genomic coordinates or strands are mapped.  Default: TRUE.\\
    \hline
    \multicolumn{2}{c}{Model Parameters}\\
    \hline
    S & The number of states.\\
    fac & A vector of length N for the experimental condition of each ChIP replicate.\\
    J & A single number or a numeric vector of the numbers of clusters to be included in the model.\\
    family & The distribution of family to be used.  \software{MBASIC} currently support five distribution types: 'lognormal', 'negbin', 'binom', 'scaled-t', 'gamma-binom'. See our man files for more information.\\
    \hline
    \multicolumn{2}{c}{Tuning Parameters}\\
    \hline
    maxitr & The maximum number of iterations in the E-M algorithm. Default: 100.\\
    tol & Tolerance for the relative increment in the log-likelihood function to check the E-M algorithm's convergence. Default: 1e-10.\\
    tol.par & Tolerance for the maximum relative change in parameters to check the algorithm's convergence. Default: 1e-5.\\
    datafile & The location to save the count matrices, or load pre-computed count matrices.\\
    \hline
  \end{tabular}
\end{table}

Before we move on to describe the step-wise execution, we highlight the usage of the argument 'datafile'. In the above codes, when we compute 'fit', the file 'datafile' is not generated yet, so we process ChIP and input data and save the processed data in 'datafile'. When we compute 'allfits', \Rfunction{MBASIC.allfit} detects that 'datafile' already exists, so it automatically loads the preprocessed data and skip the step of processing the ChIP and input data. This can save substantially amount of time if the size of our data is large.

\subsection{Step 2: Generate the Data Matrices}

We can execute Step 2 and 3 separately. In Step 2, we use the function \Rfunction{generateReadMatrices} to calculate the ChIP count at each locus for each ChIP replicate. We also calculate the count at each locus for each matching input.

<<results="hide",cache=TRUE>>=
## Step 2: Generate mapped count matrices
dat <- generateReadMatrices(chipfile = tbl$chipfile, inputfile = tbl$inputfile, input.suffix = ".bed", target = target, chipformat = tbl$chipformat, inputformat = tbl$inputformat, fragLen = 150, pairedEnd = FALSE, unique = TRUE)
@

<<results="hide",cache=TRUE>>=
conds <- paste(tbl$cell, tbl$factor, sep = ".")
@

We can directly use the matching input counts as the covariate data in our model. Advanced users of our package may want to normalize the input counts according to the mappability and GC scores and use the normalized counts as the covariate. In that case, we need call functions \Rfunction{averageMGC} and \Rfunction{bkng\_mean}.

<<results="hide">>=
## Step 2': calculate the mappability and GC-content scores for each locus
target <- averageMGC(target = target, m.prefix = "syntheticData/mgc/", m.suffix = "_M.txt", gc.prefix = "syntheticData/mgc/", gc.suffix = "_GC.txt")
## Step 2": compute the normalized input counts
dat$input1 <- bkng_mean(inputdat = dat$input, target = target, family = "negbin")
@

Notice that such a normalization step is automatically executed if users specify the 'm.prefix', 'm.suffix', 'gc.prefix' and 'gc.suffix' arguments in \Rfunction{MASIC.pipeline}.

<<eval=FALSE,echo=FALSE,cache=FALSE>>=
save(dat, conds, file = "dat.Rda")
@

\subsection{Step 3: Build the MBASIC Model}

<<eval=FALSE,echo=FALSE,cache=FALSE>>=
setwd("~/mbasic_git/test/")
library(MBASIC)
load("dat.Rda")
@

We can build an MBASIC model using function \Rfunction{MBASIC}:

<<results="hide">>=
## Step 3: Fit an MBASIC model
fit <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J=3, maxitr = 10, family="negbin")
@

We can also simultaneously fit models with different numbers of clusters:

<<results="hide">>=
## Step 3: Fit an MBASIC model
allfits <- MBASIC.full(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J=3:10, maxitr = 10, family="negbin", ncores = 10)
@

\section{Interpreting the Results}\label{sec:mbasicfit}

The outputs of both \Rfunction{MBASIC} and \Rfunction{MBASIC.pipeline} functions are of S-4 class \Rclass{MBASICFit}.

<<eval=FALSE>>=
showClass("MBASICFit")
@

Slot 'Theta' records the probabilities for each locus to have each state under each condition. For a model with K experiment conditions, S states and I units, slot 'Theta' is a matrix of dimension KS by I, and the (K(s-1)+k, i)-th entry is the probability for the i-th locus to have state s under condition k. 

<<>>=
dim(fit@Theta)
rownames(fit@Theta)
head(fit@Theta[1, ])
@

In our example, suppose state 1 corresponds to the un-enriched state, and state 2 the enriched state. We can use the function \Rfunction{plot} to draw a heatmap to visualize the enrichment states across all data.

<<fig.align="center",dpi=600,fig.width=6,fig.height=6,cache=FALSE>>=
plot(fit, slot = "Theta", xlab = "Locus", state = 2, cexRow = 0.6, cexCol = 0.4)
@ 

Slot 'clustProb' is a matrix for the posterior probablity of each locus to belong to each cluster. The first column contains the probability for each locus to be a singleton (i.e. not belong to any clusters). The (j+1)-th column contains the probabilities for each locus to be in cluster j.

<<>>=
dim(fit@clustProb)
round(head(fit@clustProb),3)
clusterLabels <- apply(fit@clustProb, 1, which.max) - 1
table(clusterLabels)
@

Slot 'W' is a matrix for the state-space profiles for all clusters. For a model with K conditions, S states and J clusters, this matrix has dimension KS by J, where the (k+K(s-1),j)-th entry contains the probability that a unit in cluster j has state s under condition k. For our example, the enriched probability for all clusters is in rows 11-20.

<<>>=
rownames(fit@W)
dim(fit@W)
round(head(fit@W[seq(10) + 10, ]),3)
@

We can also use the \Rfunction{plot} function to visualize the probability for each cluster to have a particular state under all conditions.

<<fig.align="center",dpi=600,fig.width=6,fig.height=6,cache=FALSE>>=
plot(fit, slot = "W", state = 2, cexRow = 0.6, cexCol = 1, srtCol = 0, adjCol = c(0.5, 1))
@ 

Slot 'Mu' and 'Sigma' are matrices for the distribution parameters for each replicate and each component (usually, one component is one state, see Section \ref{sec:component}).

<<>>=
dim(fit@Mu)
dim(fit@Sigma)
@ 

Function \Rfunction{plot} enables visualizing the range of the fitted parameter values across different replicates for the same condition. Notice that for these slots the function is implemented using \Rpackage{ggplot2}, so additional arguments can be passed by '+':

<<fig.align="center",dpi=600,fig.width=4,fig.height=4,cache=FALSE>>=
plot(fit, slot = "Mu", state = 2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
@

Besides calling the \Rfunction{plot} function on our fitted object, we can also use \Rfunction{ggplot} to visualize how the loci within a single replicate are allocated to different states:

<<fig.align="center",dpi=600,fig.width=4,fig.height=5,cache=FALSE>>=
## which replicate to plot
repid <- 1
chip.counts <- dat$chip[, repid]
input.counts <- dat$input[, repid]
pred.states <- as.character(apply(fit@Theta[rownames(fit@Theta) == conds[repid], ], 2, which.max))
ggplot() + geom_point(aes(x = input.counts, y = chip.counts, color = pred.states)) +
  theme(legend.position = "top")
@

\section{Advanced Functions}\label{sec:adv}

\subsection{Multiple Components in One State}\label{sec:component}

MBASIC model assumes that the distribution of each data is a mixture of several components, and the components are mapped to different states. In the simpliest cases, each component corresponds to a distinct state. In some cases, we might want to include multiple components in one state. For example, for ChIP-seq data, we may want to include two components for the enriched state to capture both the weakly enriched and strongly enriched loci. This can be done by specifying the 'statemap' value. In the following example, we assume there are three components for data set, the first component corresponds to the un-enriched state, the second and the third components both belong to the enriched states.

<<results="hide">>=
fit.mix <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J = 3, maxitr = 10, family = "negbin", statemap = c(1, 2, 2))
@ 

\subsection{Minimum Enrichment Setting for Negative Binomial Distributions}

When using \Rfunction{MBASIC} to analyze data with the negative binomial distribution, the 'min.count' can be used to specify the minimum data threshold for enriched components. For ChIP-seq data, this can be used as a threshold for the enrichment detection. 'min.count' accepts four formats: a scalar, a vector with the same length as the number of components, a vector with the same length as the number of replicates, and a matrix. 

We recommend that users specify different thresholds for individual replicates that account for their sequencing depth difference. In this case, we should let 'min.count' be a vector the same length as the number of replicates, and it specifies the threshold for each replicate for all components other than 1. The following example sets the threshold based on the 25\% percentiles for the matching input of each replicate. Notice that the output of \Rfunction{generateReadMatrices} contains the sequencing depth information (``dat\$depth'') that is used here to scale the ChIP samples against their matching inputs:

<<>>=
mincount.thresholds <- apply(dat$input, 2, function(x) quantile(x, 0.25)) * apply(dat$depth, 1, function(x) x[1] / x[2])
mincount.thresholds <- as.integer(mincount.thresholds)
mincount.thresholds[mincount.thresholds < 5] <- 5
summary(mincount.thresholds)
fit.threshold1 <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J = 3, maxitr = 10, family = "negbin", statemap = c(1, 2, 2), min.count = mincount.thresholds)
@

For the scalar value, 'min.count' specifies the threshold for all units with components other than 1. In the previous example, if we want to add a restriction that all loci with states other than 1 must have values at least 5, we can use:

<<results="hide">>=
fit.threshold2 <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J = 3, maxitr = 10, family = "negbin", statemap = c(1, 2, 2), min.count = 5)
@ 

If 'min.count' is a vector the same length as the number of components, it specifies the threshold for each component for all the replicates:

<<>>=
fit.threshold3 <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J = 3, maxitr = 10, family = "negbin", statemap = c(1, 2, 2), min.count = c(0, 5, 10))
@ 

Finally, we can specify the thresholds for every component and every replicate using a matrix input:

<<>>=
mincount.mat <- cbind(0, mincount.thresholds, 2 * mincount.thresholds)
fit.threshold4 <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J = 3, maxitr = 10, family = "negbin", statemap = c(1, 2, 2), min.count = mincount.mat)
@

\subsection{Model Initialization}

Function \Rfunction{MBASIC} accepts initial values for a number of parameters. This is especially useful when an initial run of \Rfunction{MBASIC} reaches the maximum number of iterations, but the algorithm is not converged. In this case, we can rerun the \Rfunction{MBASIC} using the previously fitted model parameters to initialize the model.

<<results="hide">>=
fit.update <- MBASIC(Y = t(dat$chip), Gamma = t(dat$input), S = 2, fac = conds, J = 3,
                     maxitr = 10, family="negbin", initial = fit)
@

\subsection{Analyze the Allele Specific Binding Data}

The \software{MBASIC} can be used to analyze allele-specific binding data. For such data, we need prepare two data matrices for the read counts for all loci across all replicates. One matrix should be the counts from either the paternal or the maternal allele; the other matrix should be the sum of maternal and paternal allele counts. Calculating allele-specific counts requires either remapping the sequencing reads to the non-reference genome or first matching to the reference genome then analyzing the mismatch information. \software{MBASIC} does not implement such procedures, and require the users to provide the processed data matrices.

We can use the \Rfunction{MBASIC.sim} function (see Section \ref{sec:sim}) to generate a synthetic data set for allele-specific counts:

<<>>=
dat.asb <- MBASIC.sim(xi = 10, family = "binom", I = 1000, fac = rep(seq(10), each = 2), J = 3, S = 3, zeta = 0.1)
## The counts from either the maternal or the paternal allele
dim(dat.asb$Y)
## The total number of counts from both alleles
dim(dat.asb$X)
@ 

We can fit MBASIC models on such data with either mixtures of binomial distributions or gamma-binomial distributions (i.e. binomial distributions with Gamma priors). Notice that the total count matrix is passed through the 'Gamma' parameter:

<<>>=
## Using binomial distributions
fit.asb.bin <- MBASIC(Y = dat.asb$Y, Gamma = dat.asb$X, S = 3, fac = dat.asb$fac, J = 3, maxitr = 5, para = dat.asb, family = "binom")
## Using gamma-binomial distributions
fit.asb.gb <- MBASIC(Y = dat.asb$Y, Gamma = dat.asb$X, S = 3, fac = dat.asb$fac, J = 3, maxitr = 5, para = dat.asb, family = "gamma-binom")
@ 

\subsection{Simulation}\label{sec:sim}

The \software{MBASIC} package also provides functions to simulate and fit general MBASIC models. Function \Rfunction{MBASIC.sim} simulates data with 'I' units and 'J' clusters. The 'S' argument specifies the number of different states, and 'zeta' is the proportion of singleton. 'fac' specifies the condition for each experiment. The 'xi' argument relates to the magnitude of the simulated data. For detailed description users are recommended to read our manual.

<<>>=
## Simulate data across I=1000 units with J=3 clusters
## There are S=3 states
dat.sim <- MBASIC.sim(xi = 2, family = "lognormal", I = 1000, fac = rep(1:10, each = 2), J = 3, S = 3, zeta = 0.1)
@

\Rfunction{MBASIC.sim} returns a list object. The 'Y' field contains the simulated data matrix at each unit (column) for each experiment (row). The 'Theta' field is the matrix for the states for each unit (column) and each experimental condition (column). The 'W' field is a matrix with dimensions KS $\times$ J, where the (S(k-1)+s,j)-th entry is the probability that units in the j-th cluster have state s under the k-th condition.

<<>>=
names(dat.sim)
dim(dat.sim$Y)
dim(dat.sim$W)
dim(dat.sim$Theta)
@

We can apply \Rfunction{MBASIC} to this simulated data. If we pass the simulated data to the function through the 'para' argument, we can get the following slots on the estimation error:

\begin{itemize}
\item \textit{ARI}: Adjusted Rand Index;
\item \textit{W.err}: The mean squared error in matrix W;
\item \textit{Theta.err}: The mean squared error in state estimation;
\item \textit{MisClassRate}: The mis-classification rate.
\end{itemize}
 
<<results="hide">>=
dat.sim.fit <- MBASIC(Y = dat.sim$Y, S = 3, fac = dat.sim$fac, J = 3, maxitr = 3, para = dat.sim, family = "lognormal")
@ 

<<>>=
dat.sim.fit@ARI
dat.sim.fit@W.err
dat.sim.fit@Theta.err
dat.sim.fit@MisClassRate
@

\subsection{Degenerate MBASIC Models}

In a degenerate MBASIC model, the states for each unit under each condition are directly observed. \Rfunction{MBASIC.sim.state} and \Rfunction{MBASIC.state} functions allows users to simulate and fit such models. The usage of these functions are similar to functions \Rfunction{MBASIC.sim} and \Rfunction{MBASIC}.

\Rfunction{MBASIC.sim.state} simulates data from a degenerate MBASIC model. Different from \Rfunction{MBASIC.sim}, \Rfunction{MBASIC.sim.state} does not need arguments 'fac' and 'family', but it needs the 'K' argument, specifying the number of experimental conditions.

<<results="hide">>=
state.sim <- MBASIC.sim.state(I = 1000, K = 10, J = 4, S = 3, zeta = 0.1)
@

\Rfunction{MBASIC.state} fits a degenerate MBASIC model. Different to function \Rfunction{MBASIC}, it does not need arguments 'Y' and 'family'. Instead, it needs the argument 'Theta' to pass the observed states.

<<results="hide">>=
state.sim.fit <- MBASIC.state(Theta = state.sim$Theta, J = 4, zeta = 0.1)
@

\section{Session Information}

<<echo=FALSE>>=
print(sessionInfo())
@

<<echo=FALSE,results="hide">>=
file.remove("data.Rda")
file.remove("syntheticData")
setwd(mydir)
@

\bibliographystyle{plain}

\bibliography{mbasic}

\end{document}


initial values for  that is accessible by the \Rfunction{MBASIC.binary} function but not \Rfunction{MBASIC.pipeline} is 'init.mod'. This argument allows the user to pass a ``MBASICFit" object, whose values are used to initialize the parameters in this function. It can be useful in two conditions:

\begin{enumerate}
\item The model fitted by a previous call of function ``MBASIC" has not yet converged, and the user wishes to increase the number of iterations;
\item The user wants to fit a MBASIC model with a larger number of clusters (``J")  from a previously fitted model;
\item The user wants to fit a MBASIC model with a different structural constraints (``struct") from a previously fitted model.
\end{enumerate}

In both cases, ``MBASIC.binary" uses the results from ``init.mod" before starting its iterations. This is significantly time saving than restarting the model fitting from scratch. However, this argument is dangerous if the user passes along a fitted model using different data sources or model structures. To avoid that, the user need to check that the arguments used to get ``init.mod" and in the current ``MBASIC.binary" must be consistent following rules below (which currently cannot be checked by our codes):

\begin{enumerate}
\item ``Y", ``Mu0", ``fac", ``family", ``nsig" must be the same;
\item ``J" for the ``MBASIC.binary" function must be larger than or equal to the value used in ``init.mod".
\end{enumerate}
   
<<eval=FALSE, echo=TRUE, results="hide">>=
## Fit a MBASIC model with 4 clusters
MBASIC.binary(Y = t(dat$chip),  Mu0 = t(Mu0),
              fac = conds,  J=4,  zeta=0.2,
              maxitr = 100, burnin = 20,
              init.mod = fit,
              struct = NULL, family="negbin",
              tol = 1e-4,  nsig = 2)

## Fit a MBASIC model with more iterations
MBASIC.binary(Y = t(dat$chip),  Mu0 = t(Mu0),
              fac = conds,  J=3,  zeta=0.2,
              maxitr = 200, burnin = 20,
              init.mod = fit,
              struct = NULL, family="negbin",
              tol = 1e-4,  nsig = 2)
@
